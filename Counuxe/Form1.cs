
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ScintillaNET;
using System.Runtime.InteropServices;
using System.IO;
using System.Reflection;
using WeAreDevs_API;
namespace Counuxe
{
    public partial class Form1 : Form
    {
        readonly ExploitAPI api = new ExploitAPI();
        public Form1()
        {
            InitializeComponent();
        }
        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HT_CAPTION = 0x2;

        [DllImportAttribute("user32.dll")]
        private static extern int SendMessage(IntPtr hWnd,
                         int Msg, int wParam, int lParam);
        [DllImportAttribute("user32.dll")]
        private static extern bool ReleaseCapture();

        private int maxLineNumberCharLength;
        private void Form1_Load(object sender, EventArgs e)
        {

            scintilla1.ScrollWidth = 0;
            scintilla1.ScrollWidthTracking = true;
            string str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            string str2 = "0123456789";
            string str3 = "ŠšŒœŸÿÀàÁáÂâÃãÄäÅåÆæÇçÈèÉéÊêËëÌìÍíÎîÏïÐðÑñÒòÓóÔôÕõÖØøÙùÚúÛûÜüÝýÞþßö";

            scintilla1.StyleResetDefault();
            scintilla1.Styles[Style.Default].Font = "Consolas";
            scintilla1.Styles[Style.Default].Size = 10;
            scintilla1.StyleClearAll();

            scintilla1.Styles[Style.Default].BackColor = Color.FromArgb(30, 30, 30);
            scintilla1.Styles[Style.Default].ForeColor = Color.White;
            scintilla1.StyleClearAll();
            scintilla1.Margins[0].Width = 10;
            scintilla1.Margins[1].Width = 10;
            scintilla1.Margins[2].Width = 0;

            scintilla1.Styles[Style.Lua.CommentLine].ForeColor = Color.Green;

            scintilla1.Styles[Style.LineNumber].ForeColor = Color.White;
            scintilla1.Styles[Style.LineNumber].BackColor = Color.FromArgb(53, 48, 46);

            this.scintilla1.Styles[4].ForeColor = Color.FromArgb(0, 135, 206, 250);
            this.scintilla1.Styles[5].ForeColor = Color.FromArgb(0, 201, 46, 72);
            this.scintilla1.Styles[13].ForeColor = Color.FromArgb(0, 255, 128, 0);
            this.scintilla1.Styles[14].ForeColor = Color.FromArgb(0, 255, 0, 0);
            this.scintilla1.Styles[15].ForeColor = Color.DarkSlateBlue;
            this.scintilla1.Styles[6].ForeColor = Color.FromArgb(255, 255, 153);
            this.scintilla1.Styles[7].ForeColor = Color.FromArgb(255, 255, 153);
            this.scintilla1.Styles[8].ForeColor = Color.FromArgb(255, 255, 153);
            this.scintilla1.Styles[10].ForeColor = Color.White;
            this.scintilla1.Styles[9].ForeColor = Color.Maroon;
            this.scintilla1.Lexer = Lexer.Lua;
            this.scintilla1.WordChars = str + str2 + str3;
            this.scintilla1.SetKeywords(0, "info and break do else elseif end for function if in local nil not or repeat return then until while false true goto assert collectgarbage dofile _G getmetatable ipairs loadfile next pairs pcall print rawequal rawget rawset setmetatable tonumber tostring type _VERSION xpcall string table math coroutine io os debug getfenv gcinfo load loadlib loadstring require select setfenv unpack _LOADED LUA_PATH _REQUIREDNAME package rawlen package bit32 utf8 _ENV string.byte string.char string.dump string.find string.format string.gsub string.len string.lower string.rep string.sub string.upper table.concat table.insert table.remove table.sort math.abs math.acos math.asin math.atan math.atan2 math.ceil math.cos math.deg math.exp math.floor math.frexp math.ldexp math.log math.max math.min math.pi math.pow math.rad math.random math.randomseed math.sin math.sqrt math.tan string.gfind string.gmatch string.match string.reverse string.pack string.packsize string.unpack table.foreach table.foreachi table.getn table.setn table.maxn table.pack table.unpack table.move math.cosh math.fmod math.huge math.log10 math.modf math.mod math.sinh math.tanh math.maxinteger math.mininteger math.tointeger math.type math.ult bit32.arshift bit32.band bit32.bnot bit32.bor bit32.btest bit32.bxor bit32.extract bit32.replace bit32.lrotate bit32.lshift bit32.rrotate bit32.rshift utf8.char utf8.charpattern utf8.codes utf8.codepoint utf8.len utf8.offset coroutine.create coroutine.resume coroutine.status coroutine.wrap coroutine.yield io.close io.flush io.input io.lines io.open io.output io.read io.tmpfile io.type io.write io.stdin io.stdout io.stderr os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename os.setlocale os.time os.tmpname coroutine.isyieldable coroutine.running io.popen module package.loaders package.seeall package.config package.searchers package.searchpath require package.cpath package.loaded package.loadlib package.path package.preload");
            this.scintilla1.SetKeywords(1, "warn");
            this.scintilla1.SetKeywords(2, "error");
            this.scintilla1.SetKeywords(3, "");
            this.scintilla1.SetProperty("fold", "1");
            this.scintilla1.SetProperty("fold.compact", "1");

            for (int i = 25; i <= 31; i++)
            {
                this.scintilla1.Markers[i].SetForeColor(SystemColors.ControlLightLight);
                this.scintilla1.Markers[i].SetBackColor(SystemColors.ControlDark);
            }
            scintilla1.Markers[Marker.Folder].Symbol = MarkerSymbol.BoxPlus;
            scintilla1.Markers[Marker.FolderOpen].Symbol = MarkerSymbol.BoxMinus;
            scintilla1.Markers[Marker.FolderEnd].Symbol = MarkerSymbol.BoxPlusConnected;
            scintilla1.Markers[Marker.FolderMidTail].Symbol = MarkerSymbol.TCorner;
            scintilla1.Markers[Marker.FolderOpenMid].Symbol = MarkerSymbol.BoxMinusConnected;
            scintilla1.Markers[Marker.FolderSub].Symbol = MarkerSymbol.VLine;
            scintilla1.Markers[Marker.FolderTail].Symbol = MarkerSymbol.LCorner;
            scintilla1.AutomaticFold = (AutomaticFold.Show | AutomaticFold.Click | AutomaticFold.Change);
            int length = this.scintilla1.Lines.Count.ToString().Length;
            bool flag = length == this.maxLineNumberCharLength;
            if (!flag)
            {
                this.scintilla1.Margins[0].Width = this.scintilla1.TextWidth(33, new string('9', length + 1)) + 2;
                this.maxLineNumberCharLength = length;
            }
            Functions.PopulateListBox(listBox1, "./Scripts", "*.luac");
            Functions.PopulateListBox(listBox1, "./Scripts", "*.txt");
            Functions.PopulateListBox(listBox1, "./Scripts", "*.lua");
        }

        private void scintilla1_Click(object sender, EventArgs e)
        {

        }

        private void scintilla1_TextChanged(object sender, EventArgs e)
        {
            int length = this.scintilla1.Lines.Count.ToString().Length;
            bool flag = this.maxLineNumberCharLength == length;
            if (!flag)
            {
                this.scintilla1.Margins[0].Width = this.scintilla1.TextWidth(33, new string('9', length + 1)) + 2;
                this.maxLineNumberCharLength = length;
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {

                    try
                    {
                        System.Windows.Forms.Application.ExitThread();
                    }
                    catch
                    {
                        try
                        {
                            System.Environment.Exit(0);
                        }
                        catch
                        {
                            try
                            {
                                System.Windows.Forms.Application.Exit();
                            }
                            catch
                            {
                                try
                                {
                                    Process[] processesByName = Process.GetProcessesByName("Counuxe");
                                    for (int i = 0; i < (int)processesByName.Length; i++)
                                    {
                                        try
                                        {
                                            processesByName[i].Kill();
                                        }
                                        catch
                                        {

                                        }
                                    }
                                }
                                catch
                                {

                                }
                            }
                        }
                    }

        }

        private void panel1_MouseHover(object sender, EventArgs e)
        {
            Focus();
        }

        private void panel1_MouseMove(object sender, MouseEventArgs e)
        {
            if (!Focused)
            {
                Focus();
            }
        }

        private void panel1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }

        private void label1_MouseHover(object sender, EventArgs e)
        {
            Focus();
        }

        private void label1_MouseMove(object sender, MouseEventArgs e)
        {
            if (!Focused)
            {
                Focus();
            }
        }

        private void label1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            //If selected item is changed, read the text document.
            //Uses try and catch because on first select, if user does not select an item and clicks the listbox, an error will appear.
            try
            {
                scintilla1.Text = File.ReadAllText($"./Scripts/{listBox1.SelectedItem}");
            }
            catch
            {
                //Empty so does not malfunction
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            api.LaunchExploit();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            api.SendLuaScript(scintilla1.Text);
        }
    }
}
